import importlib
import sys

if not importlib.util.find_spec('yaml'):
    import pip
    pip.main(['install', 'pyyaml', '--user'])

importlib.invalidate_caches()
yaml = importlib.import_module('yaml')

from . import config
from . import output as output_classes


class ParserError(Exception):
    pass




def make_bed(name: str, data: dict, default=config.Bed(), allow_none=False):
    bed = config.Bed()
    bed.name = name

    def get_element(field, default):
        value = data.get(field, default)
        if not allow_none and value is None:
            raise ParserError(f"Missing element '{field}' and no default value")
        return value

    bed.plant_type = get_element('plant_type', default.plant_type)
    bed.plant_height = get_element('plant_height', default.plant_height)
    bed.plant_distance = get_element('plant_distance', default.plant_distance)
    bed.row_distance = get_element('row_distance', default.row_distance)
    bed.plants_count = get_element('plants_count', default.plants_count)
    bed.rows_count = get_element('rows_count', default.rows_count)
    bed.beds_count = get_element('beds_count', default.beds_count)
    bed.bed_width = get_element('bed_width', default.bed_width)
    bed.shift_next_bed = data.get('shift_next_bed', True)
    return bed


def make_noise(data: dict):
    noise_data = data.get('noise')
    if noise_data is None:
        raise ParserError("Missing element 'noise' as children of 'field'")

    noise = config.Noise()
    noise.position = data.get('position', 0.)
    noise.tilt = data.get('tilt', 0.)
    noise.missing = data.get('missing', 0.)
    noise.scale = data.get('scale', 0.)
    return noise


def make_field(cfg: dict):
    field_data = cfg.get('field')
    if field_data is None:
        raise ParserError("Missing element 'field' as root element")

    field = config.Field()
    field.default = make_bed('default', field_data, allow_none=True)
    field.noise = make_noise(field_data)

    beds_data = field_data.get('beds')
    if beds_data is None:
        raise ParserError("Missing element 'beds' as children of 'field'")

    field.beds = [make_bed(name, data, field.default) for name, data in beds_data.items()]

    return field


def make_blender_file(name: str, data: dict):
    output = output_classes.BlenderFile()
    output.type = type
    output.filename = data.get('filename')
    if output.filename is None:
        raise ParserError("Missing element 'filename' in output config '{name}'")
    return output


def make_gazebo_model(name: str, data: dict):
    output = output_classes.GazeboModel()
    output.type = type
    output.name = data.get('name')
    if output.name is None:
        raise ParserError("Missing element 'name' in output config '{name}'")
    output.path = data.get('dirname', output.name.replace(' ', '_'))
    output.author = data.get('author', 'generated by cropcraft')
    output.use_absolute_path = data.get('use_absolute_path', False)
    return output


output_builders = {
    'blender_file': make_blender_file,
    'gazebo_model': make_gazebo_model,
}


def make_output(name: str, data: dict):
    type = data.get('type')
    if type is None:
        raise ParserError(f"Missing field 'type' in output '{name}'")

    builder = output_builders.get(type)
    if builder is None:
        raise ParserError(f"Unknown output type '{type}'")

    return builder(name, data)


def make_outputs(cfg: dict):
    output_data = cfg.get('output')
    if output_data is None:
        raise ParserError("Missing field 'output' as children of the root element")
    
    output_enabled = cfg.get('output_enabled')
    if output_enabled is None:
        output_enabled = list(output_data.keys())

    outputs = []
    for name in output_enabled:
        output_config = output_data.get(name)
        if output_config is None:
            print(f"Warning: Unknown output config '{name}', skipped", file=sys.stderr)
        else:
            outputs.append(make_output(name, output_config))

    return outputs


def load_yaml_config(filename: str):
    with open(filename, 'r') as file:
        cfg_data = yaml.safe_load(file.read())
    
    cfg = config.Config()
    cfg.field = make_field(cfg_data)
    cfg.outputs = make_outputs(cfg_data)

    return cfg
